<?php
/**
 * Сделайте класс User, в котором будут следующие свойства только для чтения: name и surname. Начальные значения этих свойств должны устанавливаться в конструкторе. Сделайте также геттеры этих свойств.
 * Модифицируйте предыдущую задачу так, чтобы третьим параметром в конструктор передавалась дата рождения работника в формате год-месяц-день. Запишите ее в свойство birthday. Сделайте геттер для этого свойства.
 * Модифицируйте предыдущую задачу так, чтобы был приватный метод calculateAge, который параметром будет принимать дату рождения, а возвращать возраст с учетом того, был ли уже день рождения в этом году, или нет.
 * Модифицируйте предыдущую задачу так, чтобы метод calculateAge вызывался в конструкторе объекта, рассчитывал возраст пользователя и записывал его в приватное свойство age. Сделайте геттер для этого свойства.
 * Сделайте класс Student c полем course и его геттером. Класс Student наследуется от User.
 * Сделайте класс Employee, который будет наследовать от класса User. Пусть новый класс имеет свойство salary, в котором будет хранится зарплата работника. Зарплата должна передаваться четвертым параметром в конструктор объекта. Сделайте также геттер для этого свойства.
 */
require __DIR__ . '/../vendor/autoload.php';
use \Lesson21\Student;
use \Lesson21\Employee;

$student = new Student("Гжегож", "Бженчишчикевич", "1999-04-52", 3);
echo $student->getAge() . "<br>" . $student->getBirthday() . "<br>";
echo "----------<br>";
$employee = new Employee("Andrey", "Yurevich", "2002-13-26", 2500);
$employeeWrong = new Employee("Vasya", "Kosyakov", "5212_211", 1200);
echo $employeeWrong->getAge() . "<br>->" . $employeeWrong->getBirthday() . "<-<br>";
echo $employee->getAge() . "<br>" . $employee->getBirthday() . "<br>";
echo $employee->getSalary();
