/**
 * Напишите функцию, которая показывает подсказку над элементом только в случае, когда пользователь передвигает мышь на него, но не через него.
 * Другими словами, если пользователь подвинул курсор на элементе и остановился – показывать подсказку. А если он просто быстро провёл курсором по элементу, то не надо ничего показывать. Кому понравится лишнее мелькание?
 * Технически, мы можем измерять скорость прохода курсора мыши над элементом, и если она низкая, то можно посчитать, что пользователь остановил курсор над элементом, и показать ему подсказку. А если скорость высокая, то тогда не показывать.
 * Создайте для этого универсальный объект new HoverIntent(options).
 * Его настройки options:
 * elem – отслеживаемый элемент.
 * over – функция, вызываемая, при заходе на элемент, считаем что заход – это когда курсор медленно двигается или остановился над элементом.
 * out – функция, вызываемая при уходе курсора с элемента (если был заход).
 * Если двигать курсор над «часами» быстро, то ничего не произойдёт, а если вы замедлите движение курсора над элементом или остановите его, то будет показана подсказка.
 * Обратите внимание: подсказка не должна пропадать (мигать), когда курсор переходит между дочерними элементами часов.
 */

/*// пример подсказки
let tooltip = document.createElement('div');
tooltip.className = "tooltip";
tooltip.innerHTML = "Tooltip";

// объект будет отслеживать движение мыши и вызывать функции over/out
new HoverIntent({
  elem,
  over() {
    tooltip.style.left = elem.getBoundingClientRect().left + 'px';
    tooltip.style.top = elem.getBoundingClientRect().bottom + 5 + 'px';
    document.body.append(tooltip);
  },
  out() {
    tooltip.remove();
  }
});*/


// для демо
setTimeout(function() {
	new HoverIntent({
		elem,
		over() {
			tooltip.style.left = elem.getBoundingClientRect().left + 'px';
			tooltip.style.top = elem.getBoundingClientRect().bottom + 5 + 'px';
			tooltip.hidden = false;
		},
		out() {
			tooltip.hidden = true;
		}
	});
}, 2000);